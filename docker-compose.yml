networks:
  micro_services_network:
    driver: bridge

volumes:
  postgres_data:
  mysql_data:
  mongo_data:
  clickhouse_data:
  redis_data:
  minio_data:
  meilisearch_data:
  airflow_dags:
  airflow_logs:
  airflow_plugins:

services:
  #--------------------------------------------------------------------------
  # Databases
  #--------------------------------------------------------------------------
  postgres:
    container_name: postgres_db
    build:
      context: ./dbs/postgres
    ports:
      - "5432:5432"
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB} # This will be the default 'myappdb'
      # Pass additional DB names for the init script
      POSTGRES_DB_IDENTITY: ${POSTGRES_DB_IDENTITY:-identitydb}
      POSTGRES_DB_MESSAGING: ${POSTGRES_DB_MESSAGING:-messagingdb}
      POSTGRES_DB_ACCOUNTING: ${POSTGRES_DB_ACCOUNTING:-accountingdb}
      POSTGRES_DB_ORDERS: ${POSTGRES_DB_ORDERS:-ordersdb}
      POSTGRES_DB_CRM: ${POSTGRES_DB_CRM:-crmdb}
      POSTGRES_DB_AIRFLOW: ${POSTGRES_DB_AIRFLOW:-airflowdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./dbs/postgres/init-scripts:/docker-entrypoint-initdb.d # Mount init scripts
    networks:
      - micro_services_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql:
    container_name: mysql_db
    build:
      context: ./dbs/mysql
    ports:
      - "3306:3306"
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE} # This will be the default 'myappdb'
      MYSQL_DATABASE_ECOMMERCE: ${MYSQL_DATABASE_ECOMMERCE:-ecommercedb}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./dbs/mysql/init-scripts:/docker-entrypoint-initdb.d # Mount init scripts
    networks:
      - micro_services_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -uroot -p$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    container_name: mongo_db
    build:
      context: ./dbs/mongo
    ports:
      - "27017:27017"
    env_file: .env # Added env_file for consistency
    environment: # Added environment for explicit user/pass
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      # Pass variables for the init script
      MONGO_DB_NOTIFICATIONS: ${MONGO_DB_NOTIFICATIONS:-notificationsdb}
      MONGO_NOTIFICATIONS_USER: ${MONGO_NOTIFICATIONS_USER:-notifications_user}
      MONGO_NOTIFICATIONS_PASSWORD: ${MONGO_NOTIFICATIONS_PASSWORD:-notifications_password123}
    volumes:
      - mongo_data:/data/db
      - ./dbs/mongo/init-scripts:/docker-entrypoint-initdb.d # Mount init scripts
    networks:
      - micro_services_network
    restart: unless-stopped
    # For MongoDB 5+
    healthcheck:
      test: |
        mongosh --eval \\
        'db.adminCommand("ping").ok' \\
        --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    # For older MongoDB, use:
    # healthcheck:
    #   test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  redis:
    container_name: redis_cache
    build:
      context: ./dbs/redis
    ports:
      - "6379:6379"
    env_file: .env # Added env_file
    environment: # Added for password if your Redis image uses it
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD} # Ensure Redis starts with password
    volumes:
      - redis_data:/data
    networks:
      - micro_services_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  clickhouse:
    container_name: clickhouse_db
    build:
      context: ./dbs/clickhouse
    ports:
      - "8123:8123" # HTTP
      - "9900:9000" # Native TCP (host port changed to avoid conflict)
    env_file: .env # Added env_file
    environment: # Example ClickHouse credentials
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-default}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-default_password}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-default_db}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1 # Important for user creation by entrypoint
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./dbs/clickhouse/init-scripts:/docker-entrypoint-initdb.d # Mount init scripts
    networks:
      - micro_services_network
    restart: unless-stopped
    # Add ClickHouse specific environment variables if needed, e.g. CLICKHOUSE_USER, CLICKHOUSE_PASSWORD
    # healthcheck: # ClickHouse healthcheck can be more complex
    #   test: ["CMD", "curl", "-f", "http://localhost:8123/ping"]

  #--------------------------------------------------------------------------
  # Applications (Frontends & Backend)
  #--------------------------------------------------------------------------
  header:
    container_name: header_app
    build:
      context: ./apps/header
    ports:
      - "5173:5173" # Assuming Vite default port
    networks:
      - micro_services_network
    restart: unless-stopped
    # depends_on:
    #   - go-gateway # or your main backend API

  trending:
    container_name: trending_app
    build:
      context: ./apps/trending
    ports:
      - "5174:5173" # Assuming Vite default port, mapped to different host port
    networks:
      - micro_services_network
    restart: unless-stopped
    # depends_on:
    #   - go-gateway # or your main backend API

  host_app: # Renamed from 'host' to avoid conflict if there's a 'host' network mode
    container_name: host_frontend_app
    build:
      context: .
      dockerfile: host/Dockerfile
    ports:
      - "5175:3000" # Adjusted to match the Dockerfile's EXPOSE/CMD port
    networks:
      - micro_services_network
    restart: unless-stopped
    # depends_on:
    #   - go-gateway # or your main backend API

  backend:
    container_name: backend_service
    build:
      context: ./apps/backend
    ports:
      - "8001:8000" # Assuming app runs on port 8000 in container
    networks:
      - micro_services_network
    restart: unless-stopped
    # environment:
    #   - DATABASE_URL=postgresql://user:password@postgres:5432/mydb # Corrected hostname
    depends_on:
      postgres: # Corrected from postgres_db
        condition: service_healthy
      redis:
        condition: service_healthy

  #--------------------------------------------------------------------------
  # Microservices
  #--------------------------------------------------------------------------
  go-gateway:
    container_name: go_gateway
    build:
      context: ./services/go-gateway
    ports:
      - "8081:8080" # Common Go HTTP port
    networks:
      - micro_services_network
    restart: unless-stopped
    # depends_on:
    #   - dotnet-identity
    #   - redis

  clojure-etl:
    container_name: clojure_etl
    build:
      context: ./services/clojure-etl
    networks:
      - micro_services_network
    restart: unless-stopped

  cpp-hardware:
    container_name: cpp_hardware
    build:
      context: ./services/cpp-hardware
    networks:
      - micro_services_network
    restart: unless-stopped

  crystal-iot:
    container_name: crystal_iot
    build:
      context: ./services/crystal-iot
    networks:
      - micro_services_network
    restart: unless-stopped
    # ports:
    #   - "xxxx:xxxx" # If it exposes a port

  deno-functions:
    container_name: deno_functions
    build:
      context: ./services/deno-functions
    ports:
      - "8002:8000" # Deno apps often use 8000
    networks:
      - micro_services_network
    restart: unless-stopped

  dotnet-identity:
    container_name: dotnet_identity
    build:
      context: ./services/dotnet-identity
    ports:
      - "5001:5000" # .NET apps often use 5000 or 80
    networks:
      - micro_services_network
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Database=${POSTGRES_DB_IDENTITY:-identitydb};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD} # Corrected hostname, Added default DB name
    depends_on:
      postgres: # Corrected from postgres_db
        condition: service_healthy

  elixir-messaging:
    container_name: elixir_messaging
    build:
      context: ./services/elixir-messaging
    ports:
      - "4001:4000" # Phoenix default port
    networks:
      - micro_services_network
    restart: unless-stopped
    environment:
      DATABASE_URL: ecto://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB_MESSAGING:-messagingdb} # Corrected hostname, Added default DB name
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672 # Corrected hostname to rabbitmq
      SECRET_KEY_BASE: ${SECRET_KEY_BASE} # Ensure this is passed
    depends_on:
      postgres: # Corrected from postgres_db
        condition: service_healthy
      rabbitmq: # Corrected from rabbitmq_broker
        condition: service_healthy # Assuming rabbitmq has a healthcheck or starts quickly

  haskell-compliance:
    container_name: haskell_compliance
    build:
      context: ./services/haskell-compliance
    networks:
      - micro_services_network
    restart: unless-stopped
    # Add depends_on if it uses a DB

  java-accounting:
    container_name: java_accounting
    build:
      context: ./services/java-accounting
    ports:
      - "8082:8080" # Spring Boot default
    networks:
      - micro_services_network
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB_ACCOUNTING:-accountingdb} # Corrected hostname, Added default DB name
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update # Or create-drop for development
    depends_on:
      postgres: # Corrected from postgres_db
        condition: service_healthy

  kotlin-orders:
    container_name: kotlin_orders
    build:
      context: ./services/kotlin-orders
    ports:
      - "8083:8080" # Ktor/Spring Boot default
    networks:
      - micro_services_network
    restart: unless-stopped
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB_ORDERS:-ordersdb} # Corrected hostname, Added default DB name
      # Add other necessary env vars for DB user/pass if not part of DATABASE_URL
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      postgres: # Corrected from postgres_db
        condition: service_healthy

  node-notifications:
    container_name: node_notifications
    build:
      context: ./services/node-notifications
    ports:
      - "3001:3000" # Common Node.js port
    networks:
      - micro_services_network
    restart: unless-stopped
    environment:
      MONGODB_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/${MONGO_DB_NOTIFICATIONS:-notificationsdb}?authSource=admin # Corrected hostname, Added default DB name and authSource
    depends_on:
      mongo: # Corrected from mongo_db
        condition: service_healthy

  php-ecommerce:
    container_name: php_ecommerce
    build:
      context: ./services/php-ecommerce
    ports:
      - "8084:80" # PHP apps served on port 80 in container
    networks:
      - micro_services_network
    restart: unless-stopped
    environment:
      APP_ENV: development
      DB_CONNECTION: mysql
      DB_HOST: mysql # Corrected hostname
      DB_PORT: 3306
      DB_DATABASE: ${MYSQL_DATABASE_ECOMMERCE:-ecommercedb} # Added default DB name
      DB_USERNAME: root # Or a dedicated user
      DB_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    depends_on:
      mysql: # Corrected from mysql_db
        condition: service_healthy
      redis:
        condition: service_healthy

  python-forecast:
    container_name: python_forecast
    build:
      context: ./services/python-forecast
    ports:
      - "5002:5000" # Flask/FastAPI common port
    networks:
      - micro_services_network
    restart: unless-stopped
    # Add depends_on and DB environment variables if it uses a DB

  ruby-crm:
    container_name: ruby_crm
    build:
      context: ./services/ruby-crm
    ports:
      - "4567:4567" # Sinatra default
    networks:
      - micro_services_network
    restart: unless-stopped
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB_CRM:-crmdb} # Corrected hostname, Added default DB name
      # RACK_ENV: development # If applicable
    depends_on:
      postgres: # Corrected from postgres_db
        condition: service_healthy

  rust-analytics:
    container_name: rust_analytics
    build:
      context: ./services/rust-analytics
    networks:
      - micro_services_network
    restart: unless-stopped
    # Add depends_on and DB environment variables if it uses a DB

  scala-reporting:
    container_name: scala_reporting
    build:
      context: ./services/scala-reporting
    networks:
      - micro_services_network
    restart: unless-stopped
    # Add depends_on and DB environment variables if it uses a DB

  swift-notifications:
    container_name: swift_notifications
    build:
      context: ./services/swift-notifications
    ports:
      - "3017:3017"
    networks:
      - micro_services_network
    restart: unless-stopped
    # Add depends_on and DB environment variables if it uses a DB

  #--------------------------------------------------------------------------
  # Tools
  #--------------------------------------------------------------------------
  rabbitmq:
    container_name: rabbitmq_broker
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  # AMQP
      - "15672:15672" # Management UI
    env_file: .env
    networks:
      - micro_services_network
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck: # Added healthcheck for RabbitMQ
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    # volumes: # Persist RabbitMQ data if needed
    #   - rabbitmq_data:/var/lib/rabbitmq

  minio:
    container_name: minio_storage
    image: minio/minio:latest
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console
    env_file: .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - micro_services_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    container_name: keycloak_identity
    image: quay.io/keycloak/keycloak:latest
    command: start-dev
    env_file: .env
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      # KC_DB: postgres # Example for external DB
      # KC_DB_URL_HOST: postgres # Corrected from postgres_db
      # KC_DB_URL_DATABASE: keycloakdb
      # KC_DB_USERNAME: keycloak_user
      # KC_DB_PASSWORD: YOUR_STRONG_PASSWORD_KEYCLOAK_DB
      # KC_HOSTNAME: localhost # Set this to your actual hostname for Keycloak to be accessible
    ports:
      - "8086:8080"
    networks:
      - micro_services_network
    restart: unless-stopped
    # depends_on: # If using an external DB like postgres
    #   - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s


  meilisearch:
    container_name: meilisearch_engine
    image: getmeili/meilisearch:latest
    ports:
      - "7700:7700"
    volumes:
      - meilisearch_data:/data.ms
    env_file: .env
    networks:
      - micro_services_network
    restart: unless-stopped
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY} # Optional: set a master key
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 5s
      timeout: 1s
      retries: 20

  airflow:
    container_name: airflow_service
    build:
      context: ./tools/airflow
    ports:
      - "8085:8080" # Airflow webserver default
    networks:
      - micro_services_network
    env_file: .env # Added env_file
    restart: unless-stopped
    command: airflow webserver # Explicitly set command to start webserver
    volumes: # These are examples, Airflow setup can be complex
      - airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB_AIRFLOW:-airflowdb} # Added default DB name
      # Basic logging to stdout
      AIRFLOW__LOGGING__LOGGING_LEVEL: INFO
      AIRFLOW__LOGGING__FAB_LOGGING_LEVEL: INFO
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__LOGGING__REMOTE_LOGGING: "False"
      # Ensure Fernet key is set if you use it, or remove dependencies on it for now
      # AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY:-YOUR_GENERATED_FERNET_KEY}
    depends_on:
      postgres: # Corrected from postgres_db
        condition: service_healthy # If using Postgres as backend
      # redis: # If using CeleryExecutor with Redis
      #   condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-webserver:
    container_name: airflow_webserver
    build:
      context: ./tools/airflow
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - micro_services_network
    env_file: .env
    restart: unless-stopped
    depends_on:
      postgres: # Corrected from postgres_db
        condition: service_healthy
      airflow-scheduler:
        condition: service_started # Wait for scheduler to start

  airflow-scheduler:
    container_name: airflow_scheduler
    build:
      context: ./tools/airflow
      dockerfile: Dockerfile
    networks:
      - micro_services_network
    env_file: .env
    restart: unless-stopped
    depends_on:
      postgres: # Corrected from postgres_db
        condition: service_healthy
      redis:
        condition: service_healthy
